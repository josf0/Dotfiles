$date
	Fri Nov 10 07:09:18 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module test_i2c_master $end
$var wire 1 ! sda_t $end
$var wire 1 " sda_o $end
$var wire 1 # scl_t $end
$var wire 1 $ scl_o $end
$var wire 1 % s_axis_data_tready $end
$var wire 1 & s_axis_cmd_ready $end
$var wire 1 ' missed_ack $end
$var wire 1 ( m_axis_data_tvalid $end
$var wire 1 ) m_axis_data_tlast $end
$var wire 8 * m_axis_data_tdata [7:0] $end
$var wire 1 + busy $end
$var wire 1 , bus_control $end
$var wire 1 - bus_active $end
$var reg 1 . clk $end
$var reg 8 / current_test [7:0] $end
$var reg 1 0 m_axis_data_tready $end
$var reg 16 1 prescale [15:0] $end
$var reg 1 2 rst $end
$var reg 7 3 s_axis_cmd_address [6:0] $end
$var reg 1 4 s_axis_cmd_read $end
$var reg 1 5 s_axis_cmd_start $end
$var reg 1 6 s_axis_cmd_stop $end
$var reg 1 7 s_axis_cmd_valid $end
$var reg 1 8 s_axis_cmd_write $end
$var reg 1 9 s_axis_cmd_write_multiple $end
$var reg 8 : s_axis_data_tdata [7:0] $end
$var reg 1 ; s_axis_data_tlast $end
$var reg 1 < s_axis_data_tvalid $end
$var reg 1 = scl_i $end
$var reg 1 > sda_i $end
$var reg 1 ? stop_on_idle $end
$scope module UUT $end
$var wire 1 - bus_active $end
$var wire 1 , bus_control $end
$var wire 1 + busy $end
$var wire 1 . clk $end
$var wire 8 @ m_axis_data_tdata [7:0] $end
$var wire 1 ) m_axis_data_tlast $end
$var wire 1 0 m_axis_data_tready $end
$var wire 1 ( m_axis_data_tvalid $end
$var wire 1 ' missed_ack $end
$var wire 16 A prescale [15:0] $end
$var wire 1 2 rst $end
$var wire 7 B s_axis_cmd_address [6:0] $end
$var wire 1 4 s_axis_cmd_read $end
$var wire 1 & s_axis_cmd_ready $end
$var wire 1 5 s_axis_cmd_start $end
$var wire 1 6 s_axis_cmd_stop $end
$var wire 1 7 s_axis_cmd_valid $end
$var wire 1 8 s_axis_cmd_write $end
$var wire 1 9 s_axis_cmd_write_multiple $end
$var wire 8 C s_axis_data_tdata [7:0] $end
$var wire 1 ; s_axis_data_tlast $end
$var wire 1 % s_axis_data_tready $end
$var wire 1 < s_axis_data_tvalid $end
$var wire 1 = scl_i $end
$var wire 1 D scl_negedge $end
$var wire 1 $ scl_o $end
$var wire 1 E scl_posedge $end
$var wire 1 # scl_t $end
$var wire 1 > sda_i $end
$var wire 1 F sda_negedge $end
$var wire 1 " sda_o $end
$var wire 1 G sda_posedge $end
$var wire 1 ! sda_t $end
$var wire 1 H start_bit $end
$var wire 1 I stop_bit $end
$var wire 1 ? stop_on_idle $end
$var parameter 5 J PHY_STATE_ACTIVE $end
$var parameter 5 K PHY_STATE_IDLE $end
$var parameter 5 L PHY_STATE_READ_BIT_1 $end
$var parameter 5 M PHY_STATE_READ_BIT_2 $end
$var parameter 5 N PHY_STATE_READ_BIT_3 $end
$var parameter 5 O PHY_STATE_READ_BIT_4 $end
$var parameter 5 P PHY_STATE_REPEATED_START_1 $end
$var parameter 5 Q PHY_STATE_REPEATED_START_2 $end
$var parameter 5 R PHY_STATE_START_1 $end
$var parameter 5 S PHY_STATE_START_2 $end
$var parameter 5 T PHY_STATE_STOP_1 $end
$var parameter 5 U PHY_STATE_STOP_2 $end
$var parameter 5 V PHY_STATE_STOP_3 $end
$var parameter 5 W PHY_STATE_WRITE_BIT_1 $end
$var parameter 5 X PHY_STATE_WRITE_BIT_2 $end
$var parameter 5 Y PHY_STATE_WRITE_BIT_3 $end
$var parameter 5 Z STATE_ACTIVE_READ $end
$var parameter 5 [ STATE_ACTIVE_WRITE $end
$var parameter 5 \ STATE_ADDRESS_1 $end
$var parameter 5 ] STATE_ADDRESS_2 $end
$var parameter 5 ^ STATE_IDLE $end
$var parameter 5 _ STATE_READ $end
$var parameter 5 ` STATE_START $end
$var parameter 5 a STATE_START_WAIT $end
$var parameter 5 b STATE_STOP $end
$var parameter 5 c STATE_WRITE_1 $end
$var parameter 5 d STATE_WRITE_2 $end
$var parameter 5 e STATE_WRITE_3 $end
$var reg 7 f addr_next [6:0] $end
$var reg 7 g addr_reg [6:0] $end
$var reg 4 h bit_count_next [3:0] $end
$var reg 4 i bit_count_reg [3:0] $end
$var reg 1 j bus_active_reg $end
$var reg 1 k bus_control_next $end
$var reg 1 l bus_control_reg $end
$var reg 1 m busy_reg $end
$var reg 8 n data_next [7:0] $end
$var reg 8 o data_reg [7:0] $end
$var reg 17 p delay_next [16:0] $end
$var reg 17 q delay_reg [16:0] $end
$var reg 1 r delay_scl_next $end
$var reg 1 s delay_scl_reg $end
$var reg 1 t delay_sda_next $end
$var reg 1 u delay_sda_reg $end
$var reg 1 v last_next $end
$var reg 1 w last_reg $end
$var reg 1 x last_scl_i_reg $end
$var reg 1 y last_sda_i_reg $end
$var reg 8 z m_axis_data_tdata_next [7:0] $end
$var reg 8 { m_axis_data_tdata_reg [7:0] $end
$var reg 1 | m_axis_data_tlast_next $end
$var reg 1 } m_axis_data_tlast_reg $end
$var reg 1 ~ m_axis_data_tvalid_next $end
$var reg 1 !" m_axis_data_tvalid_reg $end
$var reg 1 "" missed_ack_next $end
$var reg 1 #" missed_ack_reg $end
$var reg 1 $" mode_read_next $end
$var reg 1 %" mode_read_reg $end
$var reg 1 &" mode_stop_next $end
$var reg 1 '" mode_stop_reg $end
$var reg 1 (" mode_write_multiple_next $end
$var reg 1 )" mode_write_multiple_reg $end
$var reg 1 *" phy_read_bit $end
$var reg 1 +" phy_release_bus $end
$var reg 1 ," phy_rx_data_next $end
$var reg 1 -" phy_rx_data_reg $end
$var reg 1 ." phy_start_bit $end
$var reg 5 /" phy_state_next [4:0] $end
$var reg 5 0" phy_state_reg [4:0] $end
$var reg 1 1" phy_stop_bit $end
$var reg 1 2" phy_tx_data $end
$var reg 1 3" phy_write_bit $end
$var reg 1 4" s_axis_cmd_ready_next $end
$var reg 1 5" s_axis_cmd_ready_reg $end
$var reg 1 6" s_axis_data_tready_next $end
$var reg 1 7" s_axis_data_tready_reg $end
$var reg 1 8" scl_i_reg $end
$var reg 1 9" scl_o_next $end
$var reg 1 :" scl_o_reg $end
$var reg 1 ;" sda_i_reg $end
$var reg 1 <" sda_o_next $end
$var reg 1 =" sda_o_reg $end
$var reg 5 >" state_next [4:0] $end
$var reg 5 ?" state_reg [4:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1001 e
b1000 d
b111 c
b1011 b
b11 a
b100 `
b1010 _
b0 ^
b110 ]
b101 \
b1 [
b10 Z
b1000 Y
b111 X
b110 W
b1111 V
b1110 U
b1101 T
b101 S
b100 R
b11 Q
b10 P
b1100 O
b1011 N
b1010 M
b1001 L
b0 K
b1 J
$end
#0
$dumpvars
b0 ?"
b0 >"
1="
1<"
1;"
1:"
19"
18"
07"
06"
05"
14"
03"
02"
01"
b0 0"
b0 /"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~
0}
0|
b0 {
b0 z
1y
1x
0w
0v
0u
0t
0s
0r
b0 q
b0 p
b0 o
b0 n
0m
0l
0k
0j
b0 i
b0 h
b0 g
b0 f
0I
0H
0G
0F
0E
0D
b0 C
b0 B
b0 A
b0 @
0?
1>
1=
0<
0;
b0 :
09
08
07
06
05
04
b0 3
02
b0 1
00
b0 /
0.
0-
0,
0+
b0 *
0)
0(
0'
0&
0%
1$
1#
1"
1!
$end
#5000
14"
1&
15"
1.
#10000
0.
#15000
1.
#20000
0.
#25000
1.
#30000
0.
#35000
1.
#40000
0.
#45000
1.
#50000
0.
#55000
1.
#60000
0.
#65000
1.
#70000
0.
#75000
1.
#80000
0.
#85000
1.
#90000
0.
#95000
1.
#100000
0.
